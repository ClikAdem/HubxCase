version: '3.8'


services:
  # MongoDB Service
  mongodb:
    image: mongo:8.0
    container_name: movie-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: MovieDatabase
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - movie-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/MovieDatabase --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service
  redis:
    image: redis:7.4-alpine
    container_name: movie-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Movie API Service
  movie-api:
    build:
      context: .
      dockerfile: Movie.Api/Dockerfile
    container_name: movie-api
    restart: unless-stopped
    ports:
      - "5000:8080"
      - "5001:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=MovieDatabase
      - RedisSettings__ConnectionString=redis:6379
      - RedisSettings__DefaultExpirationMinutes=60
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movie-network
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

networks:
  movie-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

